{"ast":null,"code":"var _jsxFileName = \"/Users/yomnaali/Documents/game/client/src/components/words/Words.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./words.css\";\nimport { useState, useEffect } from \"react\";\nimport { fetchWords } from \"../../api/api\";\nimport Button from \"../Button/Button\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport RankScreen from \"../RankScreen/RankScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Words = () => {\n  _s();\n\n  const [wordList, setwordList] = useState([]);\n  const [count, setCount] = useState(0);\n  const [flag, setFlag] = useState(false);\n  const [answer, setAnswer] = useState(\"\");\n  const [partsOfSpeech, setPartsOfSpeech] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [score, setScore] = useState(0);\n  const [rankScreen, setRankScreen] = useState(false);\n  useEffect(() => {\n    // fetch all words\n    fetchWords(setwordList, \"/words\");\n    let partsofspeech = [\"noun\", \"adverb\", \"adjective\", \"verb\"];\n    setPartsOfSpeech(partsofspeech);\n  }, []);\n\n  const handleAnswer = e => {\n    e.preventDefault();\n\n    if (e.target.innerText === wordList[count][\"pos\"]) {\n      /// show correct answer to user\n      setAnswer(\"Correct\");\n      setScore(prev => prev + 1);\n    } else {\n      setAnswer(\"Incorrect\");\n    }\n  };\n\n  const handleNext = () => {\n    setAnswer(\"\");\n\n    if (count !== wordList.length - 1) {\n      setCount(count => count + 1);\n    }\n\n    const progress1 = wordList[count] && Math.round(wordList[count][\"id\"] / wordList.length * 100);\n    setProgress(progress1);\n  };\n\n  return rankScreen ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankScreen\",\n    children: [/*#__PURE__*/_jsxDEV(RankScreen, {\n      score: Math.round(score / wordList.length * 100)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"tryAgainButton\",\n      onClick: () => {\n        setRankScreen(false);\n        setFlag(false);\n        setProgress(0);\n        setAnswer(\"\");\n        setCount(0);\n      },\n      children: \"Try Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !flag ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playNow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Play Parts of speech Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"playButton\",\n        onClick: () => {\n          setFlag(true);\n        },\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text\",\n        children: flag && wordList[count][\"word\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n        progress: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonscontainer\",\n        children: count !== wordList.length && partsOfSpeech.map((speech, index) => /*#__PURE__*/_jsxDEV(Button, {\n          name: speech,\n          handler: handleAnswer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), answer !== \"\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nextButton\",\n        onClick: () => {\n          handleNext();\n\n          if (count === wordList.length - 1) {\n            setRankScreen(true);\n          }\n        },\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text\",\n        children: [\" \", answer !== \"\" && answer, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Words, \"90MaXeIa4rjQ1FRriRcSlnMedkw=\");\n\n_c = Words;\nexport default Words;\n\nvar _c;\n\n$RefreshReg$(_c, \"Words\");","map":{"version":3,"names":["React","useState","useEffect","fetchWords","Button","ProgressBar","RankScreen","Words","wordList","setwordList","count","setCount","flag","setFlag","answer","setAnswer","partsOfSpeech","setPartsOfSpeech","progress","setProgress","score","setScore","rankScreen","setRankScreen","partsofspeech","handleAnswer","e","preventDefault","target","innerText","prev","handleNext","length","progress1","Math","round","map","speech","index"],"sources":["/Users/yomnaali/Documents/game/client/src/components/words/Words.tsx"],"sourcesContent":["import React from \"react\";\nimport \"./words.css\";\nimport { useState, useEffect } from \"react\";\nimport { fetchWords } from \"../../api/api\";\nimport Button from \"../Button/Button\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport RankScreen from \"../RankScreen/RankScreen\";\n\ninterface List {\n  word: number;\n  id: any;\n  pos: string;\n}\n\nconst Words: React.FC = () => {\n  const [wordList, setwordList] = useState<List[]>([]);\n  const [count, setCount] = useState<number>(0);\n  const [flag, setFlag] = useState<boolean>(false);\n  const [answer, setAnswer] = useState<string>(\"\");\n  const [partsOfSpeech, setPartsOfSpeech] = useState<string[]>([]);\n  const [progress, setProgress] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [rankScreen, setRankScreen] = useState<boolean>(false);\n\n  useEffect(() => {\n    // fetch all words\n    fetchWords(setwordList, \"/words\");\n    let partsofspeech: string[] = [\"noun\", \"adverb\", \"adjective\", \"verb\"];\n    setPartsOfSpeech(partsofspeech);\n  }, []);\n\n  const handleAnswer = (e: any) => {\n    e.preventDefault();\n    if (e.target.innerText === wordList[count][\"pos\"]) {\n      /// show correct answer to user\n      setAnswer(\"Correct\");\n      setScore((prev) => prev + 1);\n    } else {\n      setAnswer(\"Incorrect\");\n    }\n  };\n\n  const handleNext = () => {\n    setAnswer(\"\");\n    if (count !== wordList.length - 1) {\n      setCount((count) => count + 1);\n    }\n    const progress1 =\n      wordList[count] &&\n      Math.round((wordList[count][\"id\"] / wordList.length) * 100);\n    setProgress(progress1);\n  };\n\n  return rankScreen ? (\n    <div className=\"rankScreen\">\n      <RankScreen score={Math.round((score / wordList.length) * 100)} />\n      <button\n        className=\"tryAgainButton\"\n        onClick={() => {\n          setRankScreen(false);\n          setFlag(false);\n          setProgress(0);\n          setAnswer(\"\");\n          setCount(0);\n        }}\n      >\n        Try Again\n      </button>\n    </div>\n  ) : (\n    <>\n      {!flag ? (\n        <div className=\"playNow\">\n          <h1>Play Parts of speech Now</h1>\n          <button\n            className=\"playButton\"\n            onClick={() => {\n              setFlag(true);\n            }}\n          >\n            Start\n          </button>\n        </div>\n      ) : (\n        <div className=\"progress\">\n          <h1 className=\"text\">{flag && wordList[count][\"word\"]}</h1>\n          <ProgressBar progress={progress} />\n          <div className=\"buttonscontainer\">\n            {count !== wordList.length &&\n              partsOfSpeech.map((speech: string, index: number) => (\n                <Button name={speech} key={index} handler={handleAnswer} />\n              ))}\n          </div>\n          {answer !== \"\" && (\n            <button\n              className=\"nextButton\"\n              onClick={() => {\n                handleNext();\n                if (count === wordList.length - 1) {\n                  setRankScreen(true);\n                }\n              }}\n            >\n              Next\n            </button>\n          )}\n          <h1 className=\"text\"> {answer !== \"\" && answer} </h1>\n        </div>\n      )}\n    </>\n  );\n};\nexport default Words;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}